{"ast":null,"code":"const API_BASE_URL='http://localhost:3001/api';// API functions\nexport const api={// Books\ngetBooks:async function(){let includeExternal=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;const url=includeExternal?\"\".concat(API_BASE_URL,\"/books?external=true\"):\"\".concat(API_BASE_URL,\"/books\");const response=await fetch(url);if(!response.ok){throw new Error('Failed to fetch books');}return response.json();},getBookById:async function(id){let includeExternal=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;const url=includeExternal?\"\".concat(API_BASE_URL,\"/books/\").concat(id,\"?external=true\"):\"\".concat(API_BASE_URL,\"/books/\").concat(id);const response=await fetch(url);if(!response.ok){throw new Error('Failed to fetch book');}return response.json();},searchBooks:async function(query){let searchType=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'all';let includeExternal=arguments.length>2&&arguments[2]!==undefined?arguments[2]:true;let limit=arguments.length>3&&arguments[3]!==undefined?arguments[3]:100;// Build query parameters\nconst params=new URLSearchParams();params.append('query',query);params.append('external',includeExternal.toString());if(searchType&&searchType!=='all'){params.append('searchType',searchType);}if(limit){params.append('limit',limit.toString());}const url=\"\".concat(API_BASE_URL,\"/books/search?\").concat(params.toString());console.log('Search URL:',url);try{const response=await fetch(url);if(!response.ok){throw new Error(\"Failed to search books: \".concat(response.status,\" \").concat(response.statusText));}return response.json();}catch(error){console.error('Search error:',error);throw error;}},// Threads\ngetThreads:async()=>{const response=await fetch(\"\".concat(API_BASE_URL,\"/threads\"));if(!response.ok){throw new Error('Failed to fetch threads');}return response.json();},getThreadById:async id=>{const response=await fetch(\"\".concat(API_BASE_URL,\"/threads/\").concat(id));if(!response.ok){throw new Error('Failed to fetch thread');}return response.json();},createThread:async thread=>{const response=await fetch(\"\".concat(API_BASE_URL,\"/threads\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(thread)});if(!response.ok){throw new Error('Failed to create thread');}return response.json();},// User preferences\ngetUserPreferences:async userId=>{const response=await fetch(\"\".concat(API_BASE_URL,\"/users/\").concat(userId,\"/preferences\"));if(!response.ok){throw new Error('Failed to fetch user preferences');}return response.json();}};","map":{"version":3,"names":["API_BASE_URL","api","getBooks","includeExternal","arguments","length","undefined","url","concat","response","fetch","ok","Error","json","getBookById","id","searchBooks","query","searchType","limit","params","URLSearchParams","append","toString","console","log","status","statusText","error","getThreads","getThreadById","createThread","thread","method","headers","body","JSON","stringify","getUserPreferences","userId"],"sources":["/Users/ChapterOne/src/services/api.ts"],"sourcesContent":["import { Book, Thread, User } from '../types';\n\nconst API_BASE_URL = 'http://localhost:3001/api';\n\n// API functions\nexport const api = {\n  // Books\n  getBooks: async (includeExternal: boolean = false): Promise<Book[]> => {\n    const url = includeExternal \n      ? `${API_BASE_URL}/books?external=true`\n      : `${API_BASE_URL}/books`;\n      \n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error('Failed to fetch books');\n    }\n    return response.json();\n  },\n\n  getBookById: async (id: string, includeExternal: boolean = false): Promise<Book | undefined> => {\n    const url = includeExternal \n      ? `${API_BASE_URL}/books/${id}?external=true`\n      : `${API_BASE_URL}/books/${id}`;\n      \n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error('Failed to fetch book');\n    }\n    return response.json();\n  },\n\n  searchBooks: async (\n    query: string, \n    searchType: string = 'all',\n    includeExternal: boolean = true,\n    limit: number = 100\n  ): Promise<Book[]> => {\n    // Build query parameters\n    const params = new URLSearchParams();\n    params.append('query', query);\n    params.append('external', includeExternal.toString());\n    \n    if (searchType && searchType !== 'all') {\n      params.append('searchType', searchType);\n    }\n    \n    if (limit) {\n      params.append('limit', limit.toString());\n    }\n    \n    const url = `${API_BASE_URL}/books/search?${params.toString()}`;\n    console.log('Search URL:', url);\n    \n    try {\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(`Failed to search books: ${response.status} ${response.statusText}`);\n      }\n      return response.json();\n    } catch (error) {\n      console.error('Search error:', error);\n      throw error;\n    }\n  },\n\n  // Threads\n  getThreads: async (): Promise<Thread[]> => {\n    const response = await fetch(`${API_BASE_URL}/threads`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch threads');\n    }\n    return response.json();\n  },\n\n  getThreadById: async (id: string): Promise<Thread | undefined> => {\n    const response = await fetch(`${API_BASE_URL}/threads/${id}`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch thread');\n    }\n    return response.json();\n  },\n\n  createThread: async (thread: Omit<Thread, 'id' | 'upvotes' | 'comments' | 'timestamp'>): Promise<Thread> => {\n    const response = await fetch(`${API_BASE_URL}/threads`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(thread),\n    });\n    if (!response.ok) {\n      throw new Error('Failed to create thread');\n    }\n    return response.json();\n  },\n\n  // User preferences\n  getUserPreferences: async (userId: string): Promise<User['readingPreferences']> => {\n    const response = await fetch(`${API_BASE_URL}/users/${userId}/preferences`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch user preferences');\n    }\n    return response.json();\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}