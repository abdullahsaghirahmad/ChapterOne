{"ast":null,"code":"var _jsxFileName = \"/Users/Projects/ChapterOne/src/components/features/BooksPage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { BookCard } from './BookCard';\nimport { SearchBar } from './SearchBar';\nimport { api } from '../../services/api';\nimport { Switch } from '../ui/Switch';\nimport { useLocation, useNavigate } from 'react-router-dom';\n\n// Interface for Pace objects that might be returned from API\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Helper function to safely extract value from an object or return the value itself\nconst extractValue = item => {\n  if (typeof item === 'object' && item !== null && 'value' in item) {\n    return item.value;\n  }\n  return (item === null || item === void 0 ? void 0 : item.toString()) || '';\n};\n\n// Custom book data for featured books\nconst featuredBooks = [{\n  id: \"sf-dune-1\",\n  title: \"Dune\",\n  author: \"Frank Herbert\",\n  publishedYear: 1965,\n  coverImage: \"https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1555447414i/44767458.jpg\",\n  description: \"Set on the desert planet Arrakis, Dune is the story of the boy Paul Atreides, heir to a noble family tasked with ruling an inhospitable world where the only thing of value is the \\\"spice\\\" melange, a drug capable of extending life and enhancing consciousness.\",\n  rating: 4.7,\n  pace: \"Moderate\",\n  tone: [\"Epic\", \"Philosophical\", \"Political\", \"Atmospheric\", \"Complex\"],\n  themes: [\"Power\", \"Religion\", \"Ecology\", \"Politics\", \"Destiny\", \"Survival\"],\n  bestFor: [\"Science Fiction Fans\", \"Political Theorists\", \"Philosophers\", \"Environmental Scientists\"],\n  professions: [\"Political Scientists\", \"Ecologists\", \"Futurists\", \"Philosophers\"],\n  isExternal: false,\n  pageCount: 658,\n  categories: [\"Science Fiction\", \"Classic\", \"Space Opera\"]\n}, {\n  id: \"fantasy-lotr-1\",\n  title: \"The Lord of the Rings\",\n  author: \"J.R.R. Tolkien\",\n  publishedYear: 1954,\n  coverImage: \"https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1566425108i/33.jpg\",\n  description: \"One Ring to rule them all, One Ring to find them, One Ring to bring them all and in the darkness bind them. In ancient times the Rings of Power were crafted by the Elven-smiths, and Sauron, the Dark Lord, forged the One Ring, filling it with his own power so that he could rule all others.\",\n  rating: 4.8,\n  pace: \"Slow\",\n  tone: [\"Epic\", \"Descriptive\", \"Mythic\", \"Poetic\", \"Adventure\"],\n  themes: [\"Good vs Evil\", \"Fellowship\", \"Heroism\", \"Power\", \"Sacrifice\", \"Journey\"],\n  bestFor: [\"Fantasy Lovers\", \"Literary Scholars\", \"Historians\", \"Linguists\"],\n  professions: [\"Writers\", \"Linguists\", \"Mythologists\", \"Historians\"],\n  isExternal: false,\n  pageCount: 1178,\n  categories: [\"Fantasy\", \"Classic\", \"Epic\"]\n}, {\n  id: \"romance-pride-1\",\n  title: \"Pride and Prejudice\",\n  author: \"Jane Austen\",\n  publishedYear: 1813,\n  coverImage: \"https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1320399351i/1885.jpg\",\n  description: \"Since its immediate success in 1813, Pride and Prejudice has remained one of the most popular novels in the English language. Jane Austen called this brilliant work \\\"her own darling child\\\" and its vivacious heroine, Elizabeth Bennet, \\\"as delightful a creature as ever appeared in print.\\\"\",\n  rating: 4.6,\n  pace: \"Moderate\",\n  tone: [\"Witty\", \"Ironic\", \"Romantic\", \"Satirical\", \"Elegant\"],\n  themes: [\"Social Class\", \"Marriage\", \"Pride\", \"Prejudice\", \"Love\", \"Self-discovery\"],\n  bestFor: [\"Romance Readers\", \"Literary Critics\", \"Sociologists\", \"Feminists\"],\n  professions: [\"English Professors\", \"Sociologists\", \"Journalists\", \"Writers\"],\n  isExternal: false,\n  pageCount: 279,\n  categories: [\"Romance\", \"Classic\", \"Literary Fiction\"]\n}, {\n  id: \"nonfiction-thinking-1\",\n  title: \"Thinking, Fast and Slow\",\n  author: \"Daniel Kahneman\",\n  publishedYear: 2011,\n  coverImage: \"https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1317793965i/11468377.jpg\",\n  description: \"In the international bestseller, Thinking, Fast and Slow, Daniel Kahneman, the renowned psychologist and winner of the Nobel Prize in Economics, takes us on a groundbreaking tour of the mind and explains the two systems that drive the way we think.\",\n  rating: 4.5,\n  pace: \"Slow\",\n  tone: [\"Academic\", \"Insightful\", \"Analytical\", \"Accessible\", \"Thought-provoking\"],\n  themes: [\"Psychology\", \"Decision Making\", \"Behavioral Economics\", \"Cognitive Biases\", \"Rationality\"],\n  bestFor: [\"Business Leaders\", \"Product Managers\", \"Decision Makers\", \"Psychology Enthusiasts\"],\n  professions: [\"Psychologists\", \"Economists\", \"Product Managers\", \"Executives\", \"Data Scientists\"],\n  isExternal: false,\n  pageCount: 499,\n  categories: [\"Psychology\", \"Non-fiction\", \"Economics\", \"Science\"]\n}];\nexport const BooksPage = () => {\n  _s();\n  const location = useLocation();\n  const navigate = useNavigate();\n  const [books, setBooks] = useState([]);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [includeExternal, setIncludeExternal] = useState(true);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [searchType, setSearchType] = useState('all');\n\n  // Handle URL search parameters when component loads\n  useEffect(() => {\n    const queryParams = new URLSearchParams(location.search);\n    const queryFromUrl = queryParams.get('query');\n    const typeFromUrl = queryParams.get('type');\n    if (queryFromUrl) {\n      setSearchQuery(queryFromUrl);\n      if (typeFromUrl) {\n        setSearchType(typeFromUrl);\n      }\n      // Fetch books with URL parameters\n      fetchBooks(queryFromUrl, typeFromUrl || 'all', includeExternal);\n    } else {\n      // If on homepage with no search params, show featured books\n      setBooks(featuredBooks);\n      setLoading(false);\n    }\n  }, [location.search]);\n  const fetchBooks = async (query = '', type = 'all', useExternal = includeExternal) => {\n    setLoading(true);\n    setError(null);\n    try {\n      // If on the homepage with no query, show featured books\n      if (!query) {\n        setBooks(featuredBooks);\n        setLoading(false);\n        return;\n      }\n      let data;\n      if (query) {\n        console.log(`Searching for \"${query}\" in category \"${type}\"`);\n        data = await api.searchBooks(query, type, useExternal);\n      } else {\n        data = await api.getBooks(useExternal);\n      }\n\n      // Process the books to handle all fields that might be objects\n      const processedData = data.map(book => {\n        // Process any string arrays that might be returned as JSON strings or objects\n        let processedThemes = book.themes;\n        let processedTone = book.tone;\n        let processedProfessions = book.professions;\n        let processedBestFor = book.bestFor;\n\n        // Handle if themes is a string (potentially a stringified array)\n        if (typeof book.themes === 'string') {\n          try {\n            // Try to parse as JSON\n            processedThemes = JSON.parse(book.themes);\n          } catch (e) {\n            processedThemes = book.themes.split(',').map(t => t.trim());\n          }\n        }\n\n        // Process arrays that might have objects or JSON strings\n        if (Array.isArray(processedThemes)) {\n          processedThemes = processedThemes.map(t => extractValue(t));\n        } else {\n          processedThemes = [];\n        }\n\n        // Handle tone the same way\n        if (typeof book.tone === 'string') {\n          try {\n            processedTone = JSON.parse(book.tone);\n          } catch (e) {\n            processedTone = book.tone.split(',').map(t => t.trim());\n          }\n        }\n        if (Array.isArray(processedTone)) {\n          processedTone = processedTone.map(t => extractValue(t));\n        } else {\n          processedTone = [];\n        }\n\n        // Handle professions the same way\n        if (typeof book.professions === 'string') {\n          try {\n            processedProfessions = JSON.parse(book.professions);\n          } catch (e) {\n            processedProfessions = book.professions.split(',').map(p => p.trim());\n          }\n        }\n        if (Array.isArray(processedProfessions)) {\n          processedProfessions = processedProfessions.map(p => extractValue(p));\n        } else {\n          processedProfessions = [];\n        }\n\n        // Handle bestFor field\n        if (typeof book.bestFor === 'string') {\n          try {\n            processedBestFor = JSON.parse(book.bestFor);\n          } catch (e) {\n            processedBestFor = book.bestFor.split(',').map(b => b.trim());\n          }\n        }\n        if (Array.isArray(processedBestFor)) {\n          processedBestFor = processedBestFor.map(b => extractValue(b));\n        } else {\n          // Default to empty array if bestFor is null/undefined\n          processedBestFor = [];\n        }\n\n        // Process pace field - ensure it's always a string\n        let processedPace = \"Moderate\"; // Default value\n\n        if (book.pace) {\n          if (typeof book.pace === 'object') {\n            // Safely access the value property\n            const paceObj = book.pace;\n            processedPace = paceObj.value || \"Moderate\";\n          } else if (typeof book.pace === 'string') {\n            processedPace = book.pace;\n          }\n        }\n\n        // Return processed book data with clean fields\n        return {\n          ...book,\n          pace: processedPace,\n          tone: processedTone,\n          themes: processedThemes,\n          professions: processedProfessions,\n          bestFor: processedBestFor\n        };\n      });\n      console.log('Processed books:', processedData);\n\n      // Filter books to only keep those with valid image URLs\n      const booksWithValidImages = processedData.filter(book => {\n        // Check if book has a valid cover image URL\n        const hasValidImage = book.coverImage && typeof book.coverImage === 'string' && book.coverImage.trim() !== '' && !book.coverImage.includes('placeholder') && !book.coverImage.includes('no-cover') && !book.coverImage.includes('no_cover') && (book.coverImage.startsWith('http') || book.coverImage.startsWith('/'));\n\n        // Log the result for debugging\n        console.log(`Book \"${book.title}\" image: ${book.coverImage} | Valid: ${hasValidImage}`);\n        return hasValidImage;\n      });\n      console.log(`Books with valid images: ${booksWithValidImages.length}/${processedData.length}`);\n      setBooks(booksWithValidImages);\n    } catch (err) {\n      console.error('Error processing books:', err);\n      setError(err instanceof Error ? err.message : 'Failed to load data. Please try again later.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Handler for SearchBar\n  const handleSearch = (query, type = 'all') => {\n    setSearchQuery(query);\n    setSearchType(type);\n    fetchBooks(query, type, includeExternal);\n\n    // Update URL to reflect the search\n    const searchParams = new URLSearchParams();\n    if (query) {\n      searchParams.set('query', query);\n      if (type !== 'all') {\n        searchParams.set('type', type);\n      }\n      navigate(`/books?${searchParams.toString()}`);\n    } else {\n      navigate('/books');\n    }\n  };\n  const handleExternalToggle = () => {\n    const newIncludeExternal = !includeExternal;\n    setIncludeExternal(newIncludeExternal);\n    fetchBooks(searchQuery, searchType, newIncludeExternal);\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center py-10\",\n      children: \"Loading books...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center py-10 text-red-600\",\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"space-y-8\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center space-y-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-3xl font-bold text-primary-900\",\n        children: \"Book Recommendations\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-lg text-primary-600\",\n        children: \"Discover books that match your interests and reading style\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 310,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"max-w-3xl mx-auto\",\n      children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n        onSearch: handleSearch,\n        onMoodSelect: mood => handleSearch(mood, 'mood')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center justify-end mt-4 space-x-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-sm text-gray-600\",\n          children: \"Include more books from external sources\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Switch, {\n          checked: includeExternal,\n          onChange: handleExternalToggle,\n          className: \"data-[state=checked]:bg-green-500\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 7\n    }, this), books.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center py-10\",\n      children: \"No books found. Try a different search or enable external sources.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-4 text-sm text-gray-600\",\n        children: searchQuery ? `Found ${books.length} books for \"${searchQuery}\"${searchType !== 'all' ? ` by ${searchType}` : ''}` : `Featuring ${books.length} of our top books across different categories`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid gap-6 grid-cols-1 lg:grid-cols-2\",\n        children: books.map(book => /*#__PURE__*/_jsxDEV(BookCard, {\n          title: book.title,\n          author: book.author,\n          coverImage: book.coverImage,\n          pace: book.pace,\n          tone: book.tone,\n          themes: book.themes,\n          description: book.description || \"No description available\",\n          bestFor: book.bestFor,\n          isExternal: book.isExternal || false\n        }, book.id || `${book.title}-${book.author}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 308,\n    columnNumber: 5\n  }, this);\n};\n_s(BooksPage, \"VyWouRCWkFMAZSVlwBTo5t1B5XA=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c = BooksPage;\nvar _c;\n$RefreshReg$(_c, \"BooksPage\");","map":{"version":3,"names":["React","useEffect","useState","BookCard","SearchBar","api","Switch","useLocation","useNavigate","jsxDEV","_jsxDEV","extractValue","item","value","toString","featuredBooks","id","title","author","publishedYear","coverImage","description","rating","pace","tone","themes","bestFor","professions","isExternal","pageCount","categories","BooksPage","_s","location","navigate","books","setBooks","error","setError","loading","setLoading","includeExternal","setIncludeExternal","searchQuery","setSearchQuery","searchType","setSearchType","queryParams","URLSearchParams","search","queryFromUrl","get","typeFromUrl","fetchBooks","query","type","useExternal","data","console","log","searchBooks","getBooks","processedData","map","book","processedThemes","processedTone","processedProfessions","processedBestFor","JSON","parse","e","split","t","trim","Array","isArray","p","b","processedPace","paceObj","booksWithValidImages","filter","hasValidImage","includes","startsWith","length","err","Error","message","handleSearch","searchParams","set","handleExternalToggle","newIncludeExternal","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSearch","onMoodSelect","mood","checked","onChange","_c","$RefreshReg$"],"sources":["/Users/Projects/ChapterOne/src/components/features/BooksPage.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { BookCard } from './BookCard';\nimport { SearchBar } from './SearchBar';\nimport { api } from '../../services/api';\nimport { Book, Pace } from '../../types';\nimport { Switch } from '../ui/Switch';\nimport { useLocation, useNavigate } from 'react-router-dom';\n\n// Interface for Pace objects that might be returned from API\ninterface PaceObject {\n  type?: string;\n  value?: string;\n}\n\n// Helper function to safely extract value from an object or return the value itself\nconst extractValue = (item: any): string => {\n  if (typeof item === 'object' && item !== null && 'value' in item) {\n    return item.value;\n  }\n  return item?.toString() || '';\n};\n\n// Custom book data for featured books\nconst featuredBooks: Book[] = [\n  {\n    id: \"sf-dune-1\",\n    title: \"Dune\",\n    author: \"Frank Herbert\",\n    publishedYear: 1965,\n    coverImage: \"https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1555447414i/44767458.jpg\",\n    description: \"Set on the desert planet Arrakis, Dune is the story of the boy Paul Atreides, heir to a noble family tasked with ruling an inhospitable world where the only thing of value is the \\\"spice\\\" melange, a drug capable of extending life and enhancing consciousness.\",\n    rating: 4.7,\n    pace: \"Moderate\",\n    tone: [\"Epic\", \"Philosophical\", \"Political\", \"Atmospheric\", \"Complex\"],\n    themes: [\"Power\", \"Religion\", \"Ecology\", \"Politics\", \"Destiny\", \"Survival\"],\n    bestFor: [\"Science Fiction Fans\", \"Political Theorists\", \"Philosophers\", \"Environmental Scientists\"],\n    professions: [\"Political Scientists\", \"Ecologists\", \"Futurists\", \"Philosophers\"],\n    isExternal: false,\n    pageCount: 658,\n    categories: [\"Science Fiction\", \"Classic\", \"Space Opera\"]\n  },\n  {\n    id: \"fantasy-lotr-1\",\n    title: \"The Lord of the Rings\",\n    author: \"J.R.R. Tolkien\",\n    publishedYear: 1954,\n    coverImage: \"https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1566425108i/33.jpg\",\n    description: \"One Ring to rule them all, One Ring to find them, One Ring to bring them all and in the darkness bind them. In ancient times the Rings of Power were crafted by the Elven-smiths, and Sauron, the Dark Lord, forged the One Ring, filling it with his own power so that he could rule all others.\",\n    rating: 4.8,\n    pace: \"Slow\",\n    tone: [\"Epic\", \"Descriptive\", \"Mythic\", \"Poetic\", \"Adventure\"],\n    themes: [\"Good vs Evil\", \"Fellowship\", \"Heroism\", \"Power\", \"Sacrifice\", \"Journey\"],\n    bestFor: [\"Fantasy Lovers\", \"Literary Scholars\", \"Historians\", \"Linguists\"],\n    professions: [\"Writers\", \"Linguists\", \"Mythologists\", \"Historians\"],\n    isExternal: false,\n    pageCount: 1178,\n    categories: [\"Fantasy\", \"Classic\", \"Epic\"]\n  },\n  {\n    id: \"romance-pride-1\",\n    title: \"Pride and Prejudice\",\n    author: \"Jane Austen\",\n    publishedYear: 1813,\n    coverImage: \"https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1320399351i/1885.jpg\",\n    description: \"Since its immediate success in 1813, Pride and Prejudice has remained one of the most popular novels in the English language. Jane Austen called this brilliant work \\\"her own darling child\\\" and its vivacious heroine, Elizabeth Bennet, \\\"as delightful a creature as ever appeared in print.\\\"\",\n    rating: 4.6,\n    pace: \"Moderate\",\n    tone: [\"Witty\", \"Ironic\", \"Romantic\", \"Satirical\", \"Elegant\"],\n    themes: [\"Social Class\", \"Marriage\", \"Pride\", \"Prejudice\", \"Love\", \"Self-discovery\"],\n    bestFor: [\"Romance Readers\", \"Literary Critics\", \"Sociologists\", \"Feminists\"],\n    professions: [\"English Professors\", \"Sociologists\", \"Journalists\", \"Writers\"],\n    isExternal: false,\n    pageCount: 279,\n    categories: [\"Romance\", \"Classic\", \"Literary Fiction\"]\n  },\n  {\n    id: \"nonfiction-thinking-1\",\n    title: \"Thinking, Fast and Slow\",\n    author: \"Daniel Kahneman\",\n    publishedYear: 2011,\n    coverImage: \"https://images-na.ssl-images-amazon.com/images/S/compressed.photo.goodreads.com/books/1317793965i/11468377.jpg\",\n    description: \"In the international bestseller, Thinking, Fast and Slow, Daniel Kahneman, the renowned psychologist and winner of the Nobel Prize in Economics, takes us on a groundbreaking tour of the mind and explains the two systems that drive the way we think.\",\n    rating: 4.5,\n    pace: \"Slow\",\n    tone: [\"Academic\", \"Insightful\", \"Analytical\", \"Accessible\", \"Thought-provoking\"],\n    themes: [\"Psychology\", \"Decision Making\", \"Behavioral Economics\", \"Cognitive Biases\", \"Rationality\"],\n    bestFor: [\"Business Leaders\", \"Product Managers\", \"Decision Makers\", \"Psychology Enthusiasts\"],\n    professions: [\"Psychologists\", \"Economists\", \"Product Managers\", \"Executives\", \"Data Scientists\"],\n    isExternal: false,\n    pageCount: 499,\n    categories: [\"Psychology\", \"Non-fiction\", \"Economics\", \"Science\"]\n  }\n];\n\nexport const BooksPage = () => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const [books, setBooks] = useState<Book[]>([]);\n  const [error, setError] = useState<string | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [includeExternal, setIncludeExternal] = useState(true);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [searchType, setSearchType] = useState('all');\n\n  // Handle URL search parameters when component loads\n  useEffect(() => {\n    const queryParams = new URLSearchParams(location.search);\n    const queryFromUrl = queryParams.get('query');\n    const typeFromUrl = queryParams.get('type');\n    \n    if (queryFromUrl) {\n      setSearchQuery(queryFromUrl);\n      if (typeFromUrl) {\n        setSearchType(typeFromUrl);\n      }\n      // Fetch books with URL parameters\n      fetchBooks(queryFromUrl, typeFromUrl || 'all', includeExternal);\n    } else {\n      // If on homepage with no search params, show featured books\n      setBooks(featuredBooks);\n      setLoading(false);\n    }\n  }, [location.search]);\n\n  const fetchBooks = async (\n    query: string = '', \n    type: string = 'all', \n    useExternal: boolean = includeExternal\n  ) => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      // If on the homepage with no query, show featured books\n      if (!query) {\n        setBooks(featuredBooks);\n        setLoading(false);\n        return;\n      }\n      \n      let data: Book[];\n      \n      if (query) {\n        console.log(`Searching for \"${query}\" in category \"${type}\"`);\n        data = await api.searchBooks(query, type, useExternal);\n      } else {\n        data = await api.getBooks(useExternal);\n      }\n      \n      // Process the books to handle all fields that might be objects\n      const processedData = data.map(book => {\n        // Process any string arrays that might be returned as JSON strings or objects\n        let processedThemes = book.themes;\n        let processedTone = book.tone;\n        let processedProfessions = book.professions;\n        let processedBestFor = book.bestFor;\n        \n        // Handle if themes is a string (potentially a stringified array)\n        if (typeof book.themes === 'string') {\n          try {\n            // Try to parse as JSON\n            processedThemes = JSON.parse(book.themes as string);\n          } catch (e) {\n            processedThemes = (book.themes as string).split(',').map((t: string) => t.trim());\n          }\n        }\n        \n        // Process arrays that might have objects or JSON strings\n        if (Array.isArray(processedThemes)) {\n          processedThemes = processedThemes.map((t: any) => extractValue(t));\n        } else {\n          processedThemes = [];\n        }\n\n        // Handle tone the same way\n        if (typeof book.tone === 'string') {\n          try {\n            processedTone = JSON.parse(book.tone as string);\n          } catch (e) {\n            processedTone = (book.tone as string).split(',').map((t: string) => t.trim());\n          }\n        }\n        \n        if (Array.isArray(processedTone)) {\n          processedTone = processedTone.map((t: any) => extractValue(t));\n        } else {\n          processedTone = [];\n        }\n        \n        // Handle professions the same way\n        if (typeof book.professions === 'string') {\n          try {\n            processedProfessions = JSON.parse(book.professions as string);\n          } catch (e) {\n            processedProfessions = (book.professions as string).split(',').map((p: string) => p.trim());\n          }\n        }\n        \n        if (Array.isArray(processedProfessions)) {\n          processedProfessions = processedProfessions.map((p: any) => extractValue(p));\n        } else {\n          processedProfessions = [];\n        }\n        \n        // Handle bestFor field\n        if (typeof book.bestFor === 'string') {\n          try {\n            processedBestFor = JSON.parse(book.bestFor as string);\n          } catch (e) {\n            processedBestFor = (book.bestFor as string).split(',').map((b: string) => b.trim());\n          }\n        }\n        \n        if (Array.isArray(processedBestFor)) {\n          processedBestFor = processedBestFor.map((b: any) => extractValue(b));\n        } else {\n          // Default to empty array if bestFor is null/undefined\n          processedBestFor = [];\n        }\n        \n        // Process pace field - ensure it's always a string\n        let processedPace: string = \"Moderate\";  // Default value\n        \n        if (book.pace) {\n          if (typeof book.pace === 'object') {\n            // Safely access the value property\n            const paceObj = book.pace as PaceObject;\n            processedPace = paceObj.value || \"Moderate\";\n          } else if (typeof book.pace === 'string') {\n            processedPace = book.pace;\n          }\n        }\n        \n        // Return processed book data with clean fields\n        return {\n          ...book,\n          pace: processedPace as Pace,\n          tone: processedTone,\n          themes: processedThemes,\n          professions: processedProfessions,\n          bestFor: processedBestFor\n        };\n      });\n      \n      console.log('Processed books:', processedData);\n      \n      // Filter books to only keep those with valid image URLs\n      const booksWithValidImages = processedData.filter(book => {\n        // Check if book has a valid cover image URL\n        const hasValidImage = book.coverImage && \n          typeof book.coverImage === 'string' && \n          book.coverImage.trim() !== '' &&\n          !book.coverImage.includes('placeholder') &&\n          !book.coverImage.includes('no-cover') &&\n          !book.coverImage.includes('no_cover') &&\n          (book.coverImage.startsWith('http') || book.coverImage.startsWith('/'));\n        \n        // Log the result for debugging\n        console.log(`Book \"${book.title}\" image: ${book.coverImage} | Valid: ${hasValidImage}`);\n        \n        return hasValidImage;\n      });\n      \n      console.log(`Books with valid images: ${booksWithValidImages.length}/${processedData.length}`);\n      setBooks(booksWithValidImages);\n    } catch (err) {\n      console.error('Error processing books:', err);\n      setError(err instanceof Error ? err.message : 'Failed to load data. Please try again later.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Handler for SearchBar\n  const handleSearch = (query: string, type: string = 'all') => {\n    setSearchQuery(query);\n    setSearchType(type);\n    fetchBooks(query, type, includeExternal);\n    \n    // Update URL to reflect the search\n    const searchParams = new URLSearchParams();\n    if (query) {\n      searchParams.set('query', query);\n      if (type !== 'all') {\n        searchParams.set('type', type);\n      }\n      navigate(`/books?${searchParams.toString()}`);\n    } else {\n      navigate('/books');\n    }\n  };\n\n  const handleExternalToggle = () => {\n    const newIncludeExternal = !includeExternal;\n    setIncludeExternal(newIncludeExternal);\n    fetchBooks(searchQuery, searchType, newIncludeExternal);\n  };\n\n  if (loading) {\n    return <div className=\"text-center py-10\">Loading books...</div>;\n  }\n\n  if (error) {\n    return <div className=\"text-center py-10 text-red-600\">Error: {error}</div>;\n  }\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Header */}\n      <div className=\"text-center space-y-4\">\n        <h1 className=\"text-3xl font-bold text-primary-900\">Book Recommendations</h1>\n        <p className=\"text-lg text-primary-600\">\n          Discover books that match your interests and reading style\n        </p>\n      </div>\n\n      {/* Search */}\n      <div className=\"max-w-3xl mx-auto\">\n        <SearchBar \n          onSearch={handleSearch}\n          onMoodSelect={(mood) => handleSearch(mood, 'mood')}\n        />\n        \n        {/* External API Toggle */}\n        <div className=\"flex items-center justify-end mt-4 space-x-2\">\n          <span className=\"text-sm text-gray-600\">Include more books from external sources</span>\n          <Switch\n            checked={includeExternal}\n            onChange={handleExternalToggle}\n            className=\"data-[state=checked]:bg-green-500\"\n          />\n        </div>\n      </div>\n\n      {/* Books Grid */}\n      {books.length === 0 ? (\n        <div className=\"text-center py-10\">No books found. Try a different search or enable external sources.</div>\n      ) : (\n        <div>\n          {/* Search result info */}\n          <div className=\"mb-4 text-sm text-gray-600\">\n            {searchQuery ? \n              `Found ${books.length} books for \"${searchQuery}\"${searchType !== 'all' ? ` by ${searchType}` : ''}` :\n              `Featuring ${books.length} of our top books across different categories`\n            }\n          </div>\n          \n          {/* Books grid */}\n          <div className=\"grid gap-6 grid-cols-1 lg:grid-cols-2\">\n            {books.map((book) => (\n              <BookCard\n                key={book.id || `${book.title}-${book.author}`}\n                title={book.title}\n                author={book.author}\n                coverImage={book.coverImage}\n                pace={book.pace as Pace}\n                tone={book.tone}\n                themes={book.themes}\n                description={book.description || \"No description available\"}\n                bestFor={book.bestFor}\n                isExternal={book.isExternal || false}\n              />\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}