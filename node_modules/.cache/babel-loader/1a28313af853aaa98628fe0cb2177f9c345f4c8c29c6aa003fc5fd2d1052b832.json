{"ast":null,"code":"const API_BASE_URL = 'http://localhost:3101/api';\n\n// API functions\nexport const api = {\n  // Books\n  getBooks: async (includeExternal = false) => {\n    const url = includeExternal ? `${API_BASE_URL}/books?external=true` : `${API_BASE_URL}/books`;\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error('Failed to fetch books');\n    }\n    return response.json();\n  },\n  getBookById: async (id, includeExternal = false) => {\n    const url = includeExternal ? `${API_BASE_URL}/books/${id}?external=true` : `${API_BASE_URL}/books/${id}`;\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error('Failed to fetch book');\n    }\n    return response.json();\n  },\n  searchBooks: async (query, searchType = 'all', includeExternal = true, limit = 100) => {\n    // Build query parameters\n    const params = new URLSearchParams();\n    params.append('query', query);\n    params.append('external', includeExternal.toString());\n    if (searchType && searchType !== 'all') {\n      params.append('searchType', searchType);\n    }\n    if (limit) {\n      params.append('limit', limit.toString());\n    }\n    const url = `${API_BASE_URL}/books/search?${params.toString()}`;\n    console.log('Search URL:', url);\n    try {\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(`Failed to search books: ${response.status} ${response.statusText}`);\n      }\n      return response.json();\n    } catch (error) {\n      console.error('Search error:', error);\n      throw error;\n    }\n  },\n  // Threads\n  getThreads: async () => {\n    const response = await fetch(`${API_BASE_URL}/threads`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch threads');\n    }\n    return response.json();\n  },\n  getThreadById: async id => {\n    const response = await fetch(`${API_BASE_URL}/threads/${id}`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch thread');\n    }\n    return response.json();\n  },\n  createThread: async thread => {\n    const response = await fetch(`${API_BASE_URL}/threads`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(thread)\n    });\n    if (!response.ok) {\n      throw new Error('Failed to create thread');\n    }\n    return response.json();\n  },\n  // User preferences\n  getUserPreferences: async userId => {\n    const response = await fetch(`${API_BASE_URL}/users/${userId}/preferences`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch user preferences');\n    }\n    return response.json();\n  }\n};","map":{"version":3,"names":["API_BASE_URL","api","getBooks","includeExternal","url","response","fetch","ok","Error","json","getBookById","id","searchBooks","query","searchType","limit","params","URLSearchParams","append","toString","console","log","status","statusText","error","getThreads","getThreadById","createThread","thread","method","headers","body","JSON","stringify","getUserPreferences","userId"],"sources":["/Users/ChapterOne/src/services/api.ts"],"sourcesContent":["import { Book, Thread, User } from '../types';\n\nconst API_BASE_URL = 'http://localhost:3101/api';\n\n// API functions\nexport const api = {\n  // Books\n  getBooks: async (includeExternal: boolean = false): Promise<Book[]> => {\n    const url = includeExternal \n      ? `${API_BASE_URL}/books?external=true`\n      : `${API_BASE_URL}/books`;\n      \n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error('Failed to fetch books');\n    }\n    return response.json();\n  },\n\n  getBookById: async (id: string, includeExternal: boolean = false): Promise<Book | undefined> => {\n    const url = includeExternal \n      ? `${API_BASE_URL}/books/${id}?external=true`\n      : `${API_BASE_URL}/books/${id}`;\n      \n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error('Failed to fetch book');\n    }\n    return response.json();\n  },\n\n  searchBooks: async (\n    query: string, \n    searchType: string = 'all',\n    includeExternal: boolean = true,\n    limit: number = 100\n  ): Promise<Book[]> => {\n    // Build query parameters\n    const params = new URLSearchParams();\n    params.append('query', query);\n    params.append('external', includeExternal.toString());\n    \n    if (searchType && searchType !== 'all') {\n      params.append('searchType', searchType);\n    }\n    \n    if (limit) {\n      params.append('limit', limit.toString());\n    }\n    \n    const url = `${API_BASE_URL}/books/search?${params.toString()}`;\n    console.log('Search URL:', url);\n    \n    try {\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(`Failed to search books: ${response.status} ${response.statusText}`);\n      }\n      return response.json();\n    } catch (error) {\n      console.error('Search error:', error);\n      throw error;\n    }\n  },\n\n  // Threads\n  getThreads: async (): Promise<Thread[]> => {\n    const response = await fetch(`${API_BASE_URL}/threads`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch threads');\n    }\n    return response.json();\n  },\n\n  getThreadById: async (id: string): Promise<Thread | undefined> => {\n    const response = await fetch(`${API_BASE_URL}/threads/${id}`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch thread');\n    }\n    return response.json();\n  },\n\n  createThread: async (thread: Omit<Thread, 'id' | 'upvotes' | 'comments' | 'timestamp'>): Promise<Thread> => {\n    const response = await fetch(`${API_BASE_URL}/threads`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(thread),\n    });\n    if (!response.ok) {\n      throw new Error('Failed to create thread');\n    }\n    return response.json();\n  },\n\n  // User preferences\n  getUserPreferences: async (userId: string): Promise<User['readingPreferences']> => {\n    const response = await fetch(`${API_BASE_URL}/users/${userId}/preferences`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch user preferences');\n    }\n    return response.json();\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}