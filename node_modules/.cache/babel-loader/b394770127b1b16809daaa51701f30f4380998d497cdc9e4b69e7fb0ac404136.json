{"ast":null,"code":"const API_BASE_URL = 'http://localhost:3001/api';\n\n// API functions\nexport const api = {\n  // Books\n  getBooks: async (includeExternal = false) => {\n    const url = includeExternal ? `${API_BASE_URL}/books?external=true` : `${API_BASE_URL}/books`;\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error('Failed to fetch books');\n    }\n    return response.json();\n  },\n  getBookById: async (id, includeExternal = false) => {\n    const url = includeExternal ? `${API_BASE_URL}/books/${id}?external=true` : `${API_BASE_URL}/books/${id}`;\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error('Failed to fetch book');\n    }\n    return response.json();\n  },\n  searchBooks: async (query, includeExternal = false) => {\n    const url = `${API_BASE_URL}/books/search?q=${encodeURIComponent(query)}${includeExternal ? '&external=true' : ''}`;\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error('Failed to search books');\n    }\n    return response.json();\n  },\n  // Threads\n  getThreads: async () => {\n    const response = await fetch(`${API_BASE_URL}/threads`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch threads');\n    }\n    return response.json();\n  },\n  getThreadById: async id => {\n    const response = await fetch(`${API_BASE_URL}/threads/${id}`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch thread');\n    }\n    return response.json();\n  },\n  createThread: async thread => {\n    const response = await fetch(`${API_BASE_URL}/threads`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(thread)\n    });\n    if (!response.ok) {\n      throw new Error('Failed to create thread');\n    }\n    return response.json();\n  },\n  // User preferences\n  getUserPreferences: async userId => {\n    const response = await fetch(`${API_BASE_URL}/users/${userId}/preferences`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch user preferences');\n    }\n    return response.json();\n  }\n};","map":{"version":3,"names":["API_BASE_URL","api","getBooks","includeExternal","url","response","fetch","ok","Error","json","getBookById","id","searchBooks","query","encodeURIComponent","getThreads","getThreadById","createThread","thread","method","headers","body","JSON","stringify","getUserPreferences","userId"],"sources":["/Users/Projects/ChapterOne/src/services/api.ts"],"sourcesContent":["import { Book, Thread, User } from '../types';\n\nconst API_BASE_URL = 'http://localhost:3001/api';\n\n// API functions\nexport const api = {\n  // Books\n  getBooks: async (includeExternal: boolean = false): Promise<Book[]> => {\n    const url = includeExternal \n      ? `${API_BASE_URL}/books?external=true`\n      : `${API_BASE_URL}/books`;\n      \n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error('Failed to fetch books');\n    }\n    return response.json();\n  },\n\n  getBookById: async (id: string, includeExternal: boolean = false): Promise<Book | undefined> => {\n    const url = includeExternal \n      ? `${API_BASE_URL}/books/${id}?external=true`\n      : `${API_BASE_URL}/books/${id}`;\n      \n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error('Failed to fetch book');\n    }\n    return response.json();\n  },\n\n  searchBooks: async (query: string, includeExternal: boolean = false): Promise<Book[]> => {\n    const url = `${API_BASE_URL}/books/search?q=${encodeURIComponent(query)}${includeExternal ? '&external=true' : ''}`;\n    \n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error('Failed to search books');\n    }\n    return response.json();\n  },\n\n  // Threads\n  getThreads: async (): Promise<Thread[]> => {\n    const response = await fetch(`${API_BASE_URL}/threads`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch threads');\n    }\n    return response.json();\n  },\n\n  getThreadById: async (id: string): Promise<Thread | undefined> => {\n    const response = await fetch(`${API_BASE_URL}/threads/${id}`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch thread');\n    }\n    return response.json();\n  },\n\n  createThread: async (thread: Omit<Thread, 'id' | 'upvotes' | 'comments' | 'timestamp'>): Promise<Thread> => {\n    const response = await fetch(`${API_BASE_URL}/threads`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(thread),\n    });\n    if (!response.ok) {\n      throw new Error('Failed to create thread');\n    }\n    return response.json();\n  },\n\n  // User preferences\n  getUserPreferences: async (userId: string): Promise<User['readingPreferences']> => {\n    const response = await fetch(`${API_BASE_URL}/users/${userId}/preferences`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch user preferences');\n    }\n    return response.json();\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}