{"ast":null,"code":"var _jsxFileName = \"/Users/Projects/ChapterOne/src/components/features/BooksPage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { BookCard } from './BookCard';\nimport { SearchBar } from './SearchBar';\nimport { api } from '../../services/api';\nimport { Switch } from '../ui/Switch';\nimport { useLocation, useNavigate } from 'react-router-dom';\n\n// Interface for Pace objects that might be returned from API\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Helper function to safely extract value from an object or return the value itself\nconst extractValue = item => {\n  if (typeof item === 'object' && item !== null && 'value' in item) {\n    return item.value;\n  }\n  return (item === null || item === void 0 ? void 0 : item.toString()) || '';\n};\nexport const BooksPage = () => {\n  _s();\n  const location = useLocation();\n  const navigate = useNavigate();\n  const [books, setBooks] = useState([]);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [includeExternal, setIncludeExternal] = useState(true);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [searchType, setSearchType] = useState('all');\n\n  // Handle URL search parameters when component loads\n  useEffect(() => {\n    const queryParams = new URLSearchParams(location.search);\n    const queryFromUrl = queryParams.get('query');\n    const typeFromUrl = queryParams.get('type');\n    if (queryFromUrl) {\n      setSearchQuery(queryFromUrl);\n      if (typeFromUrl) {\n        setSearchType(typeFromUrl);\n      }\n      // Fetch books with URL parameters\n      fetchBooks(queryFromUrl, typeFromUrl || 'all', includeExternal);\n    } else {\n      // If no search params, fetch all books\n      fetchBooks();\n    }\n  }, [location.search, includeExternal]);\n  const fetchBooks = async (query = '', type = 'all', useExternal = includeExternal) => {\n    setLoading(true);\n    setError(null);\n    try {\n      let data;\n      if (query) {\n        console.log(`Searching for \"${query}\" in category \"${type}\"`);\n        data = await api.searchBooks(query, type, useExternal);\n      } else {\n        data = await api.getBooks(useExternal);\n      }\n\n      // Process the books to handle all fields that might be objects\n      const processedData = data.map(book => {\n        // Process any string arrays that might be returned as JSON strings or objects\n        let processedThemes = book.themes;\n        let processedTone = book.tone;\n        let processedProfessions = book.professions;\n        let processedBestFor = book.bestFor;\n\n        // Handle if themes is a string (potentially a stringified array)\n        if (typeof book.themes === 'string') {\n          try {\n            // Try to parse as JSON\n            processedThemes = JSON.parse(book.themes);\n          } catch (e) {\n            processedThemes = book.themes.split(',').map(t => t.trim());\n          }\n        }\n\n        // Process arrays that might have objects or JSON strings\n        if (Array.isArray(processedThemes)) {\n          processedThemes = processedThemes.map(t => extractValue(t));\n        } else {\n          processedThemes = [];\n        }\n\n        // Handle tone the same way\n        if (typeof book.tone === 'string') {\n          try {\n            processedTone = JSON.parse(book.tone);\n          } catch (e) {\n            processedTone = book.tone.split(',').map(t => t.trim());\n          }\n        }\n        if (Array.isArray(processedTone)) {\n          processedTone = processedTone.map(t => extractValue(t));\n        } else {\n          processedTone = [];\n        }\n\n        // Handle professions the same way\n        if (typeof book.professions === 'string') {\n          try {\n            processedProfessions = JSON.parse(book.professions);\n          } catch (e) {\n            processedProfessions = book.professions.split(',').map(p => p.trim());\n          }\n        }\n        if (Array.isArray(processedProfessions)) {\n          processedProfessions = processedProfessions.map(p => extractValue(p));\n        } else {\n          processedProfessions = [];\n        }\n\n        // Handle bestFor field\n        if (typeof book.bestFor === 'string') {\n          try {\n            processedBestFor = JSON.parse(book.bestFor);\n          } catch (e) {\n            processedBestFor = book.bestFor.split(',').map(b => b.trim());\n          }\n        }\n        if (Array.isArray(processedBestFor)) {\n          processedBestFor = processedBestFor.map(b => extractValue(b));\n        } else {\n          // Default to empty array if bestFor is null/undefined\n          processedBestFor = [];\n        }\n\n        // Process pace field - ensure it's always a string\n        let processedPace = \"Moderate\"; // Default value\n\n        if (book.pace) {\n          if (typeof book.pace === 'object') {\n            // Safely access the value property\n            const paceObj = book.pace;\n            processedPace = paceObj.value || \"Moderate\";\n          } else if (typeof book.pace === 'string') {\n            processedPace = book.pace;\n          }\n        }\n\n        // Return processed book data with clean fields\n        return {\n          ...book,\n          pace: processedPace,\n          tone: processedTone,\n          themes: processedThemes,\n          professions: processedProfessions,\n          bestFor: processedBestFor\n        };\n      });\n      console.log('Processed books:', processedData);\n\n      // Filter out books without valid cover images\n      const booksWithImages = processedData.filter(book => {\n        // Check if the book has a valid cover image\n        return book.coverImage && typeof book.coverImage === 'string' && book.coverImage.trim() !== '' && !book.coverImage.includes('placeholder') && !book.coverImage.includes('no-cover') && !book.coverImage.includes('no_cover');\n      });\n      console.log(`Filtered ${processedData.length - booksWithImages.length} books without valid cover images`);\n      setBooks(booksWithImages);\n    } catch (err) {\n      console.error('Error processing books:', err);\n      setError(err instanceof Error ? err.message : 'Failed to load data. Please try again later.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Handler for SearchBar\n  const handleSearch = (query, type = 'all') => {\n    setSearchQuery(query);\n    setSearchType(type);\n    fetchBooks(query, type, includeExternal);\n\n    // Update URL to reflect the search\n    const searchParams = new URLSearchParams();\n    if (query) {\n      searchParams.set('query', query);\n      if (type !== 'all') {\n        searchParams.set('type', type);\n      }\n      navigate(`/books?${searchParams.toString()}`);\n    } else {\n      navigate('/books');\n    }\n  };\n  const handleExternalToggle = () => {\n    const newIncludeExternal = !includeExternal;\n    setIncludeExternal(newIncludeExternal);\n    fetchBooks(searchQuery, searchType, newIncludeExternal);\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center py-10\",\n      children: \"Loading books...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center py-10 text-red-600\",\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"space-y-8\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center space-y-4\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-3xl font-bold text-primary-900\",\n        children: \"Book Recommendations\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-lg text-primary-600\",\n        children: \"Discover books that match your interests and reading style\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"max-w-3xl mx-auto\",\n      children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n        onSearch: handleSearch,\n        onMoodSelect: mood => handleSearch(mood, 'mood')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center justify-end mt-4 space-x-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-sm text-gray-600\",\n          children: \"Include more books from external sources\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Switch, {\n          checked: includeExternal,\n          onChange: handleExternalToggle,\n          className: \"data-[state=checked]:bg-green-500\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 7\n    }, this), books.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center py-10\",\n      children: \"No books with cover images found. Try a different search or enable external sources.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-4 text-sm text-gray-600\",\n        children: [\"Found \", books.length, \" books with cover images \", searchQuery ? `for \"${searchQuery}\"` : '', searchType !== 'all' && ` by ${searchType}`]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid gap-6 grid-cols-1 lg:grid-cols-2\",\n        children: books.map(book => /*#__PURE__*/_jsxDEV(BookCard, {\n          title: book.title,\n          author: book.author,\n          coverImage: book.coverImage,\n          pace: book.pace,\n          tone: book.tone,\n          themes: book.themes,\n          description: book.description || \"No description available\",\n          bestFor: book.bestFor,\n          isExternal: book.isExternal || false\n        }, book.id || `${book.title}-${book.author}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 263,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 224,\n    columnNumber: 5\n  }, this);\n};\n_s(BooksPage, \"VyWouRCWkFMAZSVlwBTo5t1B5XA=\", false, function () {\n  return [useLocation, useNavigate];\n});\n_c = BooksPage;\nvar _c;\n$RefreshReg$(_c, \"BooksPage\");","map":{"version":3,"names":["React","useEffect","useState","BookCard","SearchBar","api","Switch","useLocation","useNavigate","jsxDEV","_jsxDEV","extractValue","item","value","toString","BooksPage","_s","location","navigate","books","setBooks","error","setError","loading","setLoading","includeExternal","setIncludeExternal","searchQuery","setSearchQuery","searchType","setSearchType","queryParams","URLSearchParams","search","queryFromUrl","get","typeFromUrl","fetchBooks","query","type","useExternal","data","console","log","searchBooks","getBooks","processedData","map","book","processedThemes","themes","processedTone","tone","processedProfessions","professions","processedBestFor","bestFor","JSON","parse","e","split","t","trim","Array","isArray","p","b","processedPace","pace","paceObj","booksWithImages","filter","coverImage","includes","length","err","Error","message","handleSearch","searchParams","set","handleExternalToggle","newIncludeExternal","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSearch","onMoodSelect","mood","checked","onChange","title","author","description","isExternal","id","_c","$RefreshReg$"],"sources":["/Users/Projects/ChapterOne/src/components/features/BooksPage.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { BookCard } from './BookCard';\nimport { SearchBar } from './SearchBar';\nimport { api } from '../../services/api';\nimport { Book, Pace } from '../../types';\nimport { Switch } from '../ui/Switch';\nimport { useLocation, useNavigate } from 'react-router-dom';\n\n// Interface for Pace objects that might be returned from API\ninterface PaceObject {\n  type?: string;\n  value?: string;\n}\n\n// Helper function to safely extract value from an object or return the value itself\nconst extractValue = (item: any): string => {\n  if (typeof item === 'object' && item !== null && 'value' in item) {\n    return item.value;\n  }\n  return item?.toString() || '';\n};\n\nexport const BooksPage = () => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const [books, setBooks] = useState<Book[]>([]);\n  const [error, setError] = useState<string | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [includeExternal, setIncludeExternal] = useState(true);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [searchType, setSearchType] = useState('all');\n\n  // Handle URL search parameters when component loads\n  useEffect(() => {\n    const queryParams = new URLSearchParams(location.search);\n    const queryFromUrl = queryParams.get('query');\n    const typeFromUrl = queryParams.get('type');\n    \n    if (queryFromUrl) {\n      setSearchQuery(queryFromUrl);\n      if (typeFromUrl) {\n        setSearchType(typeFromUrl);\n      }\n      // Fetch books with URL parameters\n      fetchBooks(queryFromUrl, typeFromUrl || 'all', includeExternal);\n    } else {\n      // If no search params, fetch all books\n      fetchBooks();\n    }\n  }, [location.search, includeExternal]);\n\n  const fetchBooks = async (\n    query: string = '', \n    type: string = 'all', \n    useExternal: boolean = includeExternal\n  ) => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      let data: Book[];\n      \n      if (query) {\n        console.log(`Searching for \"${query}\" in category \"${type}\"`);\n        data = await api.searchBooks(query, type, useExternal);\n      } else {\n        data = await api.getBooks(useExternal);\n      }\n      \n      // Process the books to handle all fields that might be objects\n      const processedData = data.map(book => {\n        // Process any string arrays that might be returned as JSON strings or objects\n        let processedThemes = book.themes;\n        let processedTone = book.tone;\n        let processedProfessions = book.professions;\n        let processedBestFor = book.bestFor;\n        \n        // Handle if themes is a string (potentially a stringified array)\n        if (typeof book.themes === 'string') {\n          try {\n            // Try to parse as JSON\n            processedThemes = JSON.parse(book.themes as string);\n          } catch (e) {\n            processedThemes = (book.themes as string).split(',').map((t: string) => t.trim());\n          }\n        }\n        \n        // Process arrays that might have objects or JSON strings\n        if (Array.isArray(processedThemes)) {\n          processedThemes = processedThemes.map((t: any) => extractValue(t));\n        } else {\n          processedThemes = [];\n        }\n\n        // Handle tone the same way\n        if (typeof book.tone === 'string') {\n          try {\n            processedTone = JSON.parse(book.tone as string);\n          } catch (e) {\n            processedTone = (book.tone as string).split(',').map((t: string) => t.trim());\n          }\n        }\n        \n        if (Array.isArray(processedTone)) {\n          processedTone = processedTone.map((t: any) => extractValue(t));\n        } else {\n          processedTone = [];\n        }\n        \n        // Handle professions the same way\n        if (typeof book.professions === 'string') {\n          try {\n            processedProfessions = JSON.parse(book.professions as string);\n          } catch (e) {\n            processedProfessions = (book.professions as string).split(',').map((p: string) => p.trim());\n          }\n        }\n        \n        if (Array.isArray(processedProfessions)) {\n          processedProfessions = processedProfessions.map((p: any) => extractValue(p));\n        } else {\n          processedProfessions = [];\n        }\n        \n        // Handle bestFor field\n        if (typeof book.bestFor === 'string') {\n          try {\n            processedBestFor = JSON.parse(book.bestFor as string);\n          } catch (e) {\n            processedBestFor = (book.bestFor as string).split(',').map((b: string) => b.trim());\n          }\n        }\n        \n        if (Array.isArray(processedBestFor)) {\n          processedBestFor = processedBestFor.map((b: any) => extractValue(b));\n        } else {\n          // Default to empty array if bestFor is null/undefined\n          processedBestFor = [];\n        }\n        \n        // Process pace field - ensure it's always a string\n        let processedPace: string = \"Moderate\";  // Default value\n        \n        if (book.pace) {\n          if (typeof book.pace === 'object') {\n            // Safely access the value property\n            const paceObj = book.pace as PaceObject;\n            processedPace = paceObj.value || \"Moderate\";\n          } else if (typeof book.pace === 'string') {\n            processedPace = book.pace;\n          }\n        }\n        \n        // Return processed book data with clean fields\n        return {\n          ...book,\n          pace: processedPace as Pace,\n          tone: processedTone,\n          themes: processedThemes,\n          professions: processedProfessions,\n          bestFor: processedBestFor\n        };\n      });\n      \n      console.log('Processed books:', processedData);\n      \n      // Filter out books without valid cover images\n      const booksWithImages = processedData.filter(book => {\n        // Check if the book has a valid cover image\n        return (\n          book.coverImage && \n          typeof book.coverImage === 'string' && \n          book.coverImage.trim() !== '' && \n          !book.coverImage.includes('placeholder') &&\n          !book.coverImage.includes('no-cover') &&\n          !book.coverImage.includes('no_cover')\n        );\n      });\n      \n      console.log(`Filtered ${processedData.length - booksWithImages.length} books without valid cover images`);\n      setBooks(booksWithImages);\n    } catch (err) {\n      console.error('Error processing books:', err);\n      setError(err instanceof Error ? err.message : 'Failed to load data. Please try again later.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Handler for SearchBar\n  const handleSearch = (query: string, type: string = 'all') => {\n    setSearchQuery(query);\n    setSearchType(type);\n    fetchBooks(query, type, includeExternal);\n    \n    // Update URL to reflect the search\n    const searchParams = new URLSearchParams();\n    if (query) {\n      searchParams.set('query', query);\n      if (type !== 'all') {\n        searchParams.set('type', type);\n      }\n      navigate(`/books?${searchParams.toString()}`);\n    } else {\n      navigate('/books');\n    }\n  };\n\n  const handleExternalToggle = () => {\n    const newIncludeExternal = !includeExternal;\n    setIncludeExternal(newIncludeExternal);\n    fetchBooks(searchQuery, searchType, newIncludeExternal);\n  };\n\n  if (loading) {\n    return <div className=\"text-center py-10\">Loading books...</div>;\n  }\n\n  if (error) {\n    return <div className=\"text-center py-10 text-red-600\">Error: {error}</div>;\n  }\n\n  return (\n    <div className=\"space-y-8\">\n      {/* Header */}\n      <div className=\"text-center space-y-4\">\n        <h1 className=\"text-3xl font-bold text-primary-900\">Book Recommendations</h1>\n        <p className=\"text-lg text-primary-600\">\n          Discover books that match your interests and reading style\n        </p>\n      </div>\n\n      {/* Search */}\n      <div className=\"max-w-3xl mx-auto\">\n        <SearchBar \n          onSearch={handleSearch}\n          onMoodSelect={(mood) => handleSearch(mood, 'mood')}\n        />\n        \n        {/* External API Toggle */}\n        <div className=\"flex items-center justify-end mt-4 space-x-2\">\n          <span className=\"text-sm text-gray-600\">Include more books from external sources</span>\n          <Switch\n            checked={includeExternal}\n            onChange={handleExternalToggle}\n            className=\"data-[state=checked]:bg-green-500\"\n          />\n        </div>\n      </div>\n\n      {/* Books Grid */}\n      {books.length === 0 ? (\n        <div className=\"text-center py-10\">No books with cover images found. Try a different search or enable external sources.</div>\n      ) : (\n        <div>\n          {/* Search result info */}\n          <div className=\"mb-4 text-sm text-gray-600\">\n            Found {books.length} books with cover images {searchQuery ? `for \"${searchQuery}\"` : ''}\n            {searchType !== 'all' && ` by ${searchType}`}\n          </div>\n          \n          {/* Books grid */}\n          <div className=\"grid gap-6 grid-cols-1 lg:grid-cols-2\">\n            {books.map((book) => (\n              <BookCard\n                key={book.id || `${book.title}-${book.author}`}\n                title={book.title}\n                author={book.author}\n                coverImage={book.coverImage}\n                pace={book.pace as Pace}\n                tone={book.tone}\n                themes={book.themes}\n                description={book.description || \"No description available\"}\n                bestFor={book.bestFor}\n                isExternal={book.isExternal || false}\n              />\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}