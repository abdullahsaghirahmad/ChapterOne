#!/usr/bin/env node

/**
 * Hugging Face Embeddings Setup Script
 * 
 * Helps users configure their Hugging Face API token for semantic embeddings
 */

const fs = require('fs');
const path = require('path');
const readline = require('readline');
const { execSync } = require('child_process');

// ANSI color codes for terminal output
const colors = {
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  red: '\x1b[31m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m',
  bold: '\x1b[1m',
  reset: '\x1b[0m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function logHeader(message) {
  console.log('');
  log('='.repeat(60), 'cyan');
  log(`${message}`, 'bold');
  log('='.repeat(60), 'cyan');
  console.log('');
}

function logSuccess(message) {
  log(`✅ ${message}`, 'green');
}

function logWarning(message) {
  log(`⚠️  ${message}`, 'yellow');
}

function logError(message) {
  log(`❌ ${message}`, 'red');
}

function logInfo(message) {
  log(`💡 ${message}`, 'blue');
}

async function askQuestion(question) {
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });

  return new Promise((resolve) => {
    rl.question(question, (answer) => {
      rl.close();
      resolve(answer.trim());
    });
  });
}

function checkFileExists(filePath) {
  return fs.existsSync(filePath);
}

function createEnvFile(envPath, token) {
  try {
    let envContent = '';
    
    // Read existing .env file if it exists
    if (checkFileExists(envPath)) {
      envContent = fs.readFileSync(envPath, 'utf8');
      
      // Check if token already exists
      if (envContent.includes('REACT_APP_HUGGING_FACE_TOKEN')) {
        // Replace existing token
        envContent = envContent.replace(
          /REACT_APP_HUGGING_FACE_TOKEN=.*/,
          `REACT_APP_HUGGING_FACE_TOKEN=${token}`
        );
      } else {
        // Add token to existing file
        envContent += `\n# Hugging Face API Configuration\nREACT_APP_HUGGING_FACE_TOKEN=${token}\n`;
      }
    } else {
      // Create new .env file with basic configuration
      envContent = `# Environment Configuration for ChapterOne
# Generated by setup-embeddings.js

# Hugging Face API Configuration
REACT_APP_HUGGING_FACE_TOKEN=${token}

# Add your Supabase configuration here if not already present
# REACT_APP_SUPABASE_URL=your-supabase-url
# REACT_APP_SUPABASE_ANON_KEY=your-anon-key
`;
    }
    
    fs.writeFileSync(envPath, envContent);
    return true;
  } catch (error) {
    logError(`Failed to write .env file: ${error.message}`);
    return false;
  }
}

function validateToken(token) {
  // Basic validation for Hugging Face token format
  if (!token || token.length < 10) {
    return false;
  }
  
  // HF tokens typically start with 'hf_'
  if (!token.startsWith('hf_')) {
    logWarning('Token should typically start with "hf_". Please verify this is correct.');
  }
  
  return true;
}

async function testConnection(token) {
  logInfo('Testing Hugging Face API connection...');
  
  try {
    // Create a test script to validate the connection
    const testScript = `
const fetch = require('node-fetch');

async function testHuggingFace() {
  try {
    const response = await fetch('https://api-inference.huggingface.co/models/sentence-transformers/all-MiniLM-L6-v2', {
      method: 'POST',
      headers: {
        'Authorization': 'Bearer ${token}',
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        inputs: 'Hello, world!',
        options: { wait_for_model: true }
      })
    });
    
    if (response.ok) {
      console.log('SUCCESS');
    } else {
      console.log('ERROR:' + response.status);
    }
  } catch (error) {
    console.log('ERROR:' + error.message);
  }
}

testHuggingFace();
`;
    
    const tempFile = path.join(__dirname, '..', '.temp-hf-test.js');
    fs.writeFileSync(tempFile, testScript);
    
    try {
      const result = execSync(`node "${tempFile}"`, { encoding: 'utf8', timeout: 10000 });
      
      if (result.includes('SUCCESS')) {
        logSuccess('API connection test passed!');
        return true;
      } else {
        logError(`API test failed: ${result}`);
        return false;
      }
    } finally {
      // Clean up temp file
      if (fs.existsSync(tempFile)) {
        fs.unlinkSync(tempFile);
      }
    }
  } catch (error) {
    logWarning(`Connection test failed: ${error.message}`);
    logInfo('This might be due to missing dependencies or network issues.');
    logInfo('The token will still be saved and you can test it manually.');
    return null; // Inconclusive
  }
}

async function main() {
  logHeader('🧠 ChapterOne - Hugging Face Embeddings Setup');
  
  logInfo('This script will help you configure Hugging Face API access for semantic embeddings.');
  console.log('');
  
  // Step 1: Get API token
  logInfo('Step 1: Get your Hugging Face API token');
  console.log('   1. Visit: https://huggingface.co/settings/tokens');
  console.log('   2. Create a new token (Read access is sufficient)');
  console.log('   3. Copy the token');
  console.log('');
  
  const token = await askQuestion('Enter your Hugging Face API token: ');
  
  if (!validateToken(token)) {
    logError('Invalid token format. Please check your token and try again.');
    process.exit(1);
  }
  
  // Step 2: Test connection (optional)
  console.log('');
  const testNow = await askQuestion('Test API connection now? (y/n): ');
  
  if (testNow.toLowerCase() === 'y' || testNow.toLowerCase() === 'yes') {
    const testResult = await testConnection(token);
    
    if (testResult === false) {
      const proceed = await askQuestion('Connection test failed. Continue anyway? (y/n): ');
      if (proceed.toLowerCase() !== 'y' && proceed.toLowerCase() !== 'yes') {
        logInfo('Setup cancelled. Please check your token and try again.');
        process.exit(1);
      }
    }
  }
  
  // Step 3: Save configuration
  console.log('');
  logInfo('Step 2: Saving configuration...');
  
  const projectRoot = path.join(__dirname, '..');
  const envPath = path.join(projectRoot, '.env');
  
  if (createEnvFile(envPath, token)) {
    logSuccess(`Configuration saved to ${envPath}`);
  } else {
    logError('Failed to save configuration.');
    process.exit(1);
  }
  
  // Step 4: Next steps
  console.log('');
  logHeader('🎉 Setup Complete!');
  
  logSuccess('Hugging Face API token has been configured successfully.');
  console.log('');
  logInfo('Next steps:');
  console.log('   1. Restart your development server (npm start)');
  console.log('   2. Visit the Admin Panel to test embeddings');
  console.log('   3. Generate embeddings for your book catalog');
  console.log('');
  logInfo('Admin Panel Access:');
  console.log('   URL: http://localhost:3000/admin');
  console.log('   Access: Restricted to app creator email');
  console.log('');
  logInfo('Commands:');
  console.log('   npm run generate-embeddings     # Batch process all books');
  console.log('   npm run generate-embeddings --limit=10  # Process first 10 books');
  console.log('');
  
  logWarning('Remember: Keep your API token secret and never commit .env files to git!');
}

// Run the setup script
if (require.main === module) {
  main().catch((error) => {
    logError(`Setup failed: ${error.message}`);
    process.exit(1);
  });
}

module.exports = { main };